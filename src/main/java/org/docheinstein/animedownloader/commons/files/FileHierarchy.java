package org.docheinstein.animedownloader.commons.files;

import org.docheinstein.animedownloader.commons.constants.Config;
import org.docheinstein.commons.hierarchy.DNode;
import org.docheinstein.commons.hierarchy.FNode;
import org.docheinstein.commons.hierarchy.Hierarchy;
import org.docheinstein.commons.logger.DocLogger;
import org.docheinstein.commons.system.OSType;
import org.docheinstein.commons.system.SystemUtil;

/**
 * Represents the tree hierarchy of folders and files used by the application.
 * <p>
 * This class is responsible for the initial folders creation.
 */
public class FileHierarchy {
    private static final DocLogger L = DocLogger.createForTag("{FILE_HIERACHY}");

    private static FileHierarchy INSTANCE = new FileHierarchy();

    private static String defaultChromeDriver() {
        OSType os = SystemUtil.getCurrentOperatingSystemType();

        if (os == OSType.Linux || os == OSType.Mac)
            return Config.Files.BASE_CHROMEDRIVER;
        else if (os == OSType.Windows)
            return Config.Files.BASE_CHROMEDRIVER + ".exe";

        return Config.Files.BASE_CHROMEDRIVER;
    }

    private final FNode mSettingsNode = FNode.create(Config.Files.SETTINGS, false);
    private final FNode mChromeDriver = FNode.create(defaultChromeDriver(), false);

    private final DNode mLogsNode = DNode.create(Config.Folders.LOGS);
    private final DNode mVideosNode = DNode.create(Config.Folders.VIDEOS);
    private final DNode mTmpNode = DNode.create(Config.Folders.TMP);
    private final DNode mDrivers = DNode.create(Config.Folders.DRIVERS, mChromeDriver);

    private Hierarchy mHierarchy;

    /**
     * Returns the instance of the file hierarchy.
     * @return the instance of the file hierarchy
     */
    public static FileHierarchy instance() {
        return INSTANCE;
    }

    private FileHierarchy() {
        L.info("Initializing file hierarchy");
        mHierarchy = Hierarchy.create(".",
            DNode.create(Config.Folders.SETTINGS,
                mSettingsNode
            ),
            mDrivers,
            mLogsNode,
            mVideosNode,
            mTmpNode
        );
    }

    /**
     * Creates the default hierarchy if it does not exists.
     * @return whether the creation has been successful
     */
    public boolean ensureExistence() {
        return mHierarchy.ensureExistence();
    }

    /**
     * Returns the root of the hierarchy.
     * @return the root of the hierarchy
     */
    public Hierarchy getRootNode() {
        return mHierarchy;
    }

    /**
     * Returns the settings.json file node.
     * @return the settings file node
     */
    public FNode getSettingsNode() { return mSettingsNode; }

    /**
     * Returns the chromedriver file node.
     * @return the chromedriver node
     */
    public FNode getChromeDriverNode() { return mChromeDriver; }

    /**
     * Returns the drivers folder node.
     * @return the drivers folder node
     */
    public DNode getDriversNode() { return mDrivers; }

    /**
     * Returns the logs folder node.
     * <p>
     * This folder contains all the logs file generated by the application
     * @return the logs node
     */
    public DNode getLogsNode() { return mLogsNode; }

    /**
     * Returns the videos folder node.
     * <p>
     * This folder contains only the .json file of the video to download or in download,
     * but not the actual videos.
     * @return the videos node
     */
    public DNode getVideosNode() { return mVideosNode; }

    /**
     * Returns the temporary folder node.
     * <p>
     * This folder contains all the temporary file generated by application
     * (actually for VVVVID).
     * @return the temporary node
     */
    public DNode getTmpNode() { return mTmpNode; }
}
